/**
 * update-password-and-login.js
 *
 * @description :: Mirar abajo la description ► ↓↓↓
 *
 * @src {{proyect}}/api/controllers/users/update-password-and-login.js
 * @author Saul Navarrov <Sinavarrov@gmail.com>
 * @created 2019/01/25
 * @version 1.0
 */
module.exports = {

  friendlyName: 'Update password and login',

  description: `Actualizara la contraseña de los usuarios luego de usar el
  forgot y luego hacer click en el link que les llego al correo electronico.`,

  inputs: {
    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      // required: true
    },

    token: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      // required: true
    }
  },

  exits: {
    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired'
    },

    unauthorized: {
      statusCode: 401,
      responseType: 'unauthorized',
      description: 'No autorizado para ver los resultados de la pagina'
    }
  },


  fn: async function (inputs, exits) {
    /***************************************************************************************
     * VARIABLES INICIALES
     ***************************************************************************************/
    const rq = this.req; // Request Cliente Page
    const moment = require('moment');
    let isSocket = rq.isSocket;
    let updatedAt = moment().format();


    /***************************************************************************************
     * BLOQUE DE SEGURIDAD SOCKET
     ***************************************************************************************/
    // Solo se aceptan solicitudes atravez de socket.io
    if (!isSocket) {
      return exits.noAuthorize({
        error: true,
        message: `Solicitud Rechazada.`
      });
    }


    /***************************************************************************************
     * BLOQUE DE DATOS OBLIGATORIOS Y REVISION DE DATA.
     ***************************************************************************************/
    // Verificando que viene el token
    if (!inputs.token) {
      throw 'invalidToken';
    }


    /***************************************************************************************
     * TRABAJO DEL CONTROLADOR
     ***************************************************************************************/
    // Look up the user with this reset token.
    let userRecord = await Users.findOne({
      passwordResetToken: inputs.token
    });

    // validando usuario no este desactivado
    if (userRecord.role < 8 && userRecord.status === 'I') {
      throw 'userInabled';
    }

    // Si no existe tal usuario, o si su token ha caducado, muestre una página de error que explique que el enlace es incorrecto.
    if (!userRecord || userRecord.passwordResetTokenExpiresAt <= Date.now()) {
      throw 'invalidOrExpiredToken';
    }

    // Hash the new password.
    let hashed = await sails.helpers.passwords.hashPassword(inputs.password);

    // Store the user's new password and clear their reset token so it can't be used again.
    await Users.update({
      id: userRecord.id
    }).set({
      status: 'E',
      password: hashed,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0,
      updatedAt: updatedAt
    });

    // Retorno del success
    return exits.success();
  }
};
