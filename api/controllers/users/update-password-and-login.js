module.exports = {


  friendlyName: 'Update password and login',


  description: '',


  inputs: {
    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      // required: true
    },

    token: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      // required: true
    }
  },


  exits: {
    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired'
    },

    unauthorized: {
      statusCode: 401,
      responseType: 'unauthorized',
      description: 'No autorizado para ver los resultados de la pagina'
    }
  },


  fn: async function (inputs, exits) {
    let rq = this.req;
    let isSocket = rq.isSocket;

    // Verificacion de la peticion si concuerda con socket
    if (!isSocket) {
      return exits.unauthorized({
        error: true,
        message: 'Unauthorized'
      });
    }

    // Verificando que viene el token
    if (!inputs.token) {
      throw 'invalidToken';
    }

    // Look up the user with this reset token.
    let userRecord = await User.findOne({
      passwordResetToken: inputs.token
    });

    // validando usuario no este desactivado
    if (userRecord.role < 8 && userRecord.status === 'I') {
      throw 'userInabled';
    }

    // Si no existe tal usuario, o si su token ha caducado, muestre una pÃ¡gina de error que explique que el enlace es incorrecto.
    if (!userRecord || userRecord.passwordResetTokenExpiresAt <= Date.now()) {
      throw 'invalidOrExpiredToken';
    }

    // Hash the new password.
    let hashed = await sails.helpers.passwords.hashPassword(inputs.password);

    // Store the user's new password and clear their reset token so it can't be used again.
    await User.update({ id: userRecord.id }).set({
      status: 'E',
      password: hashed,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0
    });


    return exits.success();

  }


};
